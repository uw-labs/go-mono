// Code generated by go-bindata. DO NOT EDIT.
//  memcopy: true
//  compress: true
//  decompress: once
//  asset-dir: true
//  restore: true
// sources:
//  migrations/001_setup.down.sql
//  migrations/001_setup.up.sql

package migrations

import (
	"bytes"
	"compress/flate"
	"io"
	"os"
	"path/filepath"
	"strings"
	"sync"
	"time"

	"github.com/tmthrgd/go-bindata/restore"
)

type asset struct {
	name string
	data string
	size int64

	once  sync.Once
	bytes []byte
	err   error
}

func (a *asset) Name() string {
	return a.name
}

func (a *asset) Size() int64 {
	return a.size
}

func (a *asset) Mode() os.FileMode {
	return 0
}

func (a *asset) ModTime() time.Time {
	return time.Time{}
}

func (*asset) IsDir() bool {
	return false
}

func (*asset) Sys() interface{} {
	return nil
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]*asset{
	"001_setup.down.sql": &asset{
		name: "001_setup.down.sql",
		data: "" +
			"\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x2d\x4e" +
			"\x2d\x2a\xb6\xe6\x02\x04\x00\x00\xff\xff",
		size: 28,
	},
	"001_setup.up.sql": &asset{
		name: "001_setup.up.sql",
		data: "" +
			"\x5c\xcc\xb1\x6a\x80\x30\x10\xc6\xf1\x3d\x4f\xf1\x8d\x0a\x7d\x03\xa7\xb4\x9e\x10\x1a\xa3\x98\x0b" +
			"\x68\x17\x11\x0d\xe2\x60\x94\xa8\x94\xbe\x7d\xa9\x2d\x0e\x5d\xef\x7e\xdf\xff\xad\x21\xc9\x04\x6a" +
			"\x99\x8c\x55\x95\x81\x2a\x60\x2a\x06\xb5\xca\xb2\xc5\x3e\x8f\xf1\x6b\x3f\xb7\x4c\x88\x3f\xc9\xf2" +
			"\x55\xd3\x3f\x75\x1d\x3e\x1e\x48\x04\x00\x2c\x13\x9c\x53\x39\xea\x46\x95\xb2\xe9\xf0\x4e\x1d\x72" +
			"\x2a\xa4\xd3\x8c\xd9\x87\x3e\x0e\x61\xda\xd6\xfe\xba\x96\x29\x49\x5f\xee\x49\x18\x56\x0f\xa6\x96" +
			"\xef\xa6\x71\x5a\xff\xde\xc7\xe8\x87\xd3\xf7\xe7\xf2\xf3\x56\x25\x59\x96\x65\xcd\x1f\x8f\x7a\xba" +
			"\x61\xfb\x4c\x52\x91\x66\xe2\x3b\x00\x00\xff\xff",
		size: 206,
	},
}

// AssetAndInfo loads and returns the asset and asset info for the
// given name. It returns an error if the asset could not be found
// or could not be loaded.
func AssetAndInfo(name string) ([]byte, os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	a.once.Do(func() {
		fr := flate.NewReader(strings.NewReader(a.data))

		var buf bytes.Buffer
		if _, a.err = io.Copy(&buf, fr); a.err != nil {
			return
		}

		if a.err = fr.Close(); a.err == nil {
			a.bytes = buf.Bytes()
		}
	})
	if a.err != nil {
		return nil, nil, &os.PathError{Op: "read", Path: name, Err: a.err}
	}

	return a.bytes, a, nil
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	data, _, err := AssetAndInfo(name)
	return data, err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}

	return names
}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	return restore.Asset(dir, name, AssetAndInfo)
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	return restore.Assets(dir, name, AssetDir, AssetAndInfo)
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree

	if name != "" {
		var ok bool
		for _, p := range strings.Split(filepath.ToSlash(name), "/") {
			if node, ok = node[p]; !ok {
				return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
			}
		}
	}

	if len(node) == 0 {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	rv := make([]string, 0, len(node))
	for name := range node {
		rv = append(rv, name)
	}

	return rv, nil
}

type bintree map[string]bintree

var _bintree = bintree{
	"001_setup.down.sql": bintree{},
	"001_setup.up.sql":   bintree{},
}
